  // Generate variables
    this.ast.program.variables.forEach((variable) => {
      this.varibles[variable] = this.variblesIndex.toString();
      this.variblesIndex++;
    });

    // Expression value holder
    this.varibles['exv'] = this.variblesIndex.toString();
    this.variblesIndex++;

    // Change procedures into MAP and set thiers backVariable
    if (this.ast.procedures) {
      this.ast.procedures.forEach((procedure) => {
        procedure.jumpLabel = this.generateUniqueLabel();
        this.procedures.set(procedure.head.name, procedure);
        this.varibles[procedure.head.name + 'back'] =
          this.variblesIndex.toString();
        this.variblesIndex++;
      });
    }

    if (this.ast.procedures) {
      this.ast.procedures.forEach((procedure) => {
        procedure.commands.forEach((command) => {
          if (command.type === 'PROCCALL') {
            const thisProc = this.procedures.get(command.name);
            command.variables.forEach((variable: string, index: number) => {
              if (thisProc) {
                this.varibles[
                  thisProc.head.name + thisProc?.head.variables[index]
                ] = this.varibles[procedure.head.name + variable];
              }
            });
          }
        });
      });
    }

    // SET special rejestres for arguments
    this.ast.program.commands.forEach((command) => {
      if (command.type === 'PROCCALL') {
        const thisProc = this.procedures.get(command.name);
        command.variables.forEach((variable: string, index: number) => {
          if (thisProc) {
            this.varibles[
              thisProc.head.name + thisProc?.head.variables[index]
            ] = this.varibles[variable];
          }
        });
      }
    });

    const startLabel = this.generateUniqueLabel();
    this.flatAst.push(`JUMP ${startLabel}`);
    // Genereate procedures
    this.procedures.forEach((proc: Procedure) => {
      // GEN PROC CODE
      this.generateProc(proc);
    });

    // Generate program
    this.flatAst.push(`${startLabel}`);
    this.ast.program.commands.forEach((command) => {
      this.generateCommand(command);
    });